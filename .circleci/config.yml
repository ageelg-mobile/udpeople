version: 2.1


orbs:
  slack: circleci/slack@4.3.1

default_image: &docker
  docker:
    - image: circleci/node:13.8.0

jobs:

  build-frontend:    
    <<: *docker
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |   
            cd ~/project/frontend && npm i         
            npm run build   
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1    
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *docker
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |      
             cd ~/project/backend && npm i               
             npm run build
      - slack/notify:
          event: fail
          mentions: '@EngineeringTeam'
          template: basic_fail_1    
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:     
    # Docker image here
    <<: *docker
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      # Your job code here
      - run:
          name: Run tests with JUnit as reporter
          command: | 
            cd ~/project/frontend && npm i  
            npm run test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/

  test-backend:
    # Docker image here
    <<: *docker
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      # Your job code here
      - run:
          name: Run tests with JUnit as reporter
          command: |  
            cd ~/project/backend && npm i  
            npm run test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
  
  scan-frontend:
    # Docker image here
    <<: *docker
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      # Your job code here
      - run:
          name: Run frontend scan
          command: |  
            cd ~/project/backend && npm i  
            npm audit --audit-level=critical

  scan-backend:
    # Docker image here
    <<: *docker
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      # Your job code here
      - run:
          name: Run backend scan
          command: |  
            cd ~/project/backend && npm i  
            npm audit --audit-level=critical


  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - restore_cache:
          key: v1-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Ensure back-end infrastructure exists
          command: |
             aws cloudformation backend-deploy \
              --stack-name backend \
              --template-file .circleci/files/backend.yml \
              --region us-east-2 \
              --tags project=udapeople
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation frontend-deploy \
            --stack-name frontend \
              --template-file .circleci/files/frontend.yml \
              --region us-east-2 \
              --tags project=udapeople
              --parameter-overrides "ID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            PUBLIC_IP=$(aws ec2 describe-instances --region ap-south-1 --query "Reservations[*].Instances[0].PublicDnsName"  --output text)
            curl -H "Content-Type: text/plain" -H "token: $MEMSTASH_TOKEN" --request PUT --data "$PUBLIC_DNS" https://api.memstash.io/values/public_ip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

workflows:
  default:
    jobs:
      - build-frontend:
            context: slack-secrets
      - build-backend:
            context: slack-secrets
      - test-frontend:
          requires: [build-frontend]         
      - test-backend:
          requires: [build-backend]        
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend] 
      - deploy-infrastructure:
           requires:
             - scan-backend
      